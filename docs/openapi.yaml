openapi: 3.0.3
info:
  title: VPN Rotator API
  version: 1.0.0
  description: |
    REST API for the VPN Rotator service that manages rotating WireGuard VPN nodes on Hetzner Cloud with comprehensive peer management.
    
    ## Features
    - **Comprehensive Peer Management**: Full lifecycle management of WireGuard peers with automatic IP allocation
    - **Intelligent Load Balancing**: Automatically distributes peers across nodes based on capacity
    - **On-demand provisioning**: Automatically provisions new VPN nodes when needed
    - **Automatic rotation**: Rotates nodes on a configurable schedule with seamless peer migration
    - **Health monitoring**: Monitors node health and replaces unhealthy nodes
    - **Circuit breaker protection**: Protects against cascading failures
    - **Request tracing**: All requests include unique request IDs for debugging
    - **IP Subnet Management**: Automatic subnet allocation and IP address management per node
    
    ## Peer Management Workflow
    1. **Connect**: Use `/api/v1/connect` to create a new peer with automatic node selection and IP allocation
    2. **Monitor**: Use `/api/v1/peers` to list and monitor peer status
    3. **Disconnect**: Use `/api/v1/disconnect` to cleanly remove peers and free resources
    
    ## Client Integration
    - **New Clients**: Use the peer management endpoints for full control over connections
    - **Error Handling**: All endpoints return standardized error responses with request IDs
    
    ## Rate Limiting
    No rate limiting is currently implemented, but clients should respect reasonable request frequencies.
    
  contact:
    name: VPN Rotator Support
    url: https://github.com/chiquitav2/vpn-rotator
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.vpn-rotator.example.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Service health check
      description: |
        Returns the current health status of the VPN Rotator service.
        This endpoint can be used for load balancer health checks and monitoring.
      operationId: getHealth
      security: []
      responses:
        '200':
          description: Service is healthy
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Unique request identifier
              example: "req_health_123"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
              example:
                success: true
                data:
                  status: "healthy"
                  version: "1.0.0"
        '500':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/circuit-breakers:
    get:
      tags:
        - Monitoring
      summary: Circuit breaker status
      description: |
        Returns the current status of all circuit breakers in the system.
        This endpoint is useful for monitoring and debugging circuit breaker states.
        
        **Note**: This endpoint is only available when circuit breaker monitoring is enabled.
      operationId: getCircuitBreakerStatus
      security: []
      responses:
        '200':
          description: Circuit breaker status retrieved successfully
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Unique request identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircuitBreakerResponse"
        '404':
          description: Circuit breaker monitoring not enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/connect:
    post:
      tags:
        - Peer Management
      summary: Connect a peer to the VPN
      description: |
        Creates a new peer connection with automatic node selection and IP allocation.
        The system will select the optimal node based on load balancing and capacity.
      operationId: connectPeer
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectRequest"
            examples:
              with_public_key:
                summary: Connect with provided public key
                value:
                  public_key: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
              generate_keys:
                summary: Request server-side key generation
                value:
                  generate_keys: true
      responses:
        '200':
          description: Peer connected successfully
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Unique request identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectResponse"
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '503':
          description: No available nodes for peer assignment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/disconnect:
    delete:
      tags:
        - Peer Management
      summary: Disconnect a peer from the VPN
      description: |
        Removes a peer connection and cleans up allocated resources including IP addresses.
      operationId: disconnectPeer
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisconnectRequest"
            example:
              peer_id: "peer-550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Peer disconnected successfully
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Unique request identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisconnectResponse"
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Peer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/peers:
    get:
      tags:
        - Peer Management
      summary: List peers with filtering and pagination
      description: |
        Returns a paginated list of peers with optional filtering by node ID and status.
      operationId: listPeers
      security: [ ]
      parameters:
        - name: node_id
          in: query
          description: Filter peers by node ID
          required: false
          schema:
            type: string
          example: "node-550e8400-e29b-41d4-a716-446655440000"
        - name: status
          in: query
          description: Filter peers by status
          required: false
          schema:
            type: string
            enum: [ active, disconnected, removing ]
          example: "active"
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          example: 50
        - name: offset
          in: query
          description: Number of results to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
      responses:
        '200':
          description: Peers retrieved successfully
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Unique request identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeersListResponse"
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/peers/{peer_id}:
    get:
      tags:
        - Peer Management
      summary: Get peer details
      description: |
        Returns detailed information about a specific peer.
      operationId: getPeer
      security: [ ]
      parameters:
        - name: peer_id
          in: path
          description: Unique peer identifier
          required: true
          schema:
            type: string
          example: "peer-550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Peer details retrieved successfully
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Unique request identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeerResponse"
        '404':
          description: Peer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    SuccessResponse:
      type: object
      required:
        - success
        - data
        - request_id
      properties:
        success:
          type: boolean
          description: Always true for successful responses
          enum: [true]
          example: true
        data:
          $ref: "#/components/schemas/NodeConfig"
        request_id:
          type: string
          description: Unique request identifier for tracing and debugging
          example: "req_abc123xyz"

    HealthResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          type: object
          required:
            - status
          properties:
            status:
              type: string
              description: Service health status
              example: "healthy"
            version:
              type: string
              description: Service version
              example: "1.0.0"

    ConfigSuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          type: object
          required:
            - server_public_key
            - server_ip
            - port
          properties:
            server_public_key:
              type: string
              description: Server's WireGuard public key
              example: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
            server_ip:
              type: string
              format: ipv4
              description: Server IP address
              example: "192.0.2.1"
            port:
              type: integer
              description: Server port
              example: 51820

    ProvisioningResponse:
      type: object
      required:
        - status
        - message
        - estimated_wait_seconds
        - retry_after_seconds
      properties:
        status:
          type: string
          enum: [ provisioning ]
          description: Current provisioning status
          example: "provisioning"
        message:
          type: string
          description: Human-readable status message
          example: "VPN node is being provisioned"
        estimated_wait_seconds:
          type: integer
          description: Estimated time until provisioning completes
          example: 120
        retry_after_seconds:
          type: integer
          description: Recommended retry interval
          example: 30

    CircuitBreakerResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          type: object
          description: Circuit breaker status information
          additionalProperties: true

    ErrorResponse:
      type: object
      required:
        - success
        - error
        - request_id
      properties:
        success:
          type: boolean
          description: Always false for error responses
          enum: [false]
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Machine-readable error code
              example: "DATABASE_ERROR"
            message:
              type: string
              description: Human-readable error message
              example: "Internal database error"
            details:
              type: string
              description: Additional error details (optional)
              example: "Failed to query node state"
        request_id:
          type: string
          description: Unique request identifier for tracing and debugging
          example: "req_abc123xyz"

    NodeConfig:
      type: object
      required:
        - version
        - server_public_key
        - server_ip
        - server_port
        - updated_at
        - rotation_scheduled
      properties:
        version:
          type: string
          description: API version for client compatibility checking
          enum: [ "v1" ]
          example: "v1"
        server_public_key:
          type: string
          description: WireGuard server public key (base64 encoded, 44 chars)
          pattern: "^[A-Za-z0-9+/]{43}=$"
          minLength: 44
          maxLength: 44
          example: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
        server_ip:
          type: string
          description: Public IPv4 address of the VPN server
          format: ipv4
          example: "192.0.2.1"
        server_port:
          type: integer
          description: WireGuard server port (UDP)
          minimum: 1
          maximum: 65535
          example: 51820
        updated_at:
          type: string
          format: date-time
          description: Timestamp when this configuration was last updated (ISO 8601)
          example: "2025-01-15T10:30:00Z"
        rotation_scheduled:
          type: boolean
          description: |
            If true, this node is scheduled for rotation within the grace period (FR-7).
            Clients should continue polling to detect the new node.
          example: false

    ConnectRequest:
      type: object
      description: Request to connect a peer to the VPN
      properties:
        public_key:
          type: string
          description: Client's WireGuard public key (base64 encoded, 44 chars)
          pattern: "^[A-Za-z0-9+/]{43}=$"
          minLength: 44
          maxLength: 44
          example: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
        generate_keys:
          type: boolean
          description: Request server-side key generation instead of providing public_key
          example: false
      oneOf:
        - required: [ public_key ]
        - required: [ generate_keys ]

    ConnectResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          type: object
          required:
            - peer_id
            - server_public_key
            - server_ip
            - server_port
            - client_ip
            - dns
            - allowed_ips
          properties:
            peer_id:
              type: string
              description: Unique peer identifier
              example: "peer-550e8400-e29b-41d4-a716-446655440000"
            server_public_key:
              type: string
              description: Server's WireGuard public key
              example: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
            server_ip:
              type: string
              format: ipv4
              description: Server IP address
              example: "192.0.2.1"
            server_port:
              type: integer
              description: Server port
              example: 51820
            client_ip:
              type: string
              format: ipv4
              description: Allocated client IP address
              example: "10.8.1.5"
            client_private_key:
              type: string
              description: Client private key (only if server-generated)
              example: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
            dns:
              type: array
              items:
                type: string
                format: ipv4
              description: DNS servers
              example: [ "1.1.1.1", "8.8.8.8" ]
            allowed_ips:
              type: array
              items:
                type: string
              description: Allowed IP ranges
              example: [ "0.0.0.0/0" ]

    DisconnectRequest:
      type: object
      required:
        - peer_id
      properties:
        peer_id:
          type: string
          description: Unique peer identifier to disconnect
          example: "peer-550e8400-e29b-41d4-a716-446655440000"

    DisconnectResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          type: object
          required:
            - message
            - peer_id
          properties:
            message:
              type: string
              description: Success message
              example: "Peer disconnected successfully"
            peer_id:
              type: string
              description: Disconnected peer identifier
              example: "peer-550e8400-e29b-41d4-a716-446655440000"

    PeerInfo:
      type: object
      required:
        - id
        - node_id
        - public_key
        - allocated_ip
        - status
        - created_at
      properties:
        id:
          type: string
          description: Unique peer identifier
          example: "peer-550e8400-e29b-41d4-a716-446655440000"
        node_id:
          type: string
          description: Node identifier where peer is connected
          example: "node-550e8400-e29b-41d4-a716-446655440000"
        public_key:
          type: string
          description: Peer's WireGuard public key
          example: "wE5pZXJ0aW9uMjAyNS0wMS0xNVQxMDozMDowMFo="
        allocated_ip:
          type: string
          format: ipv4
          description: Allocated IP address
          example: "10.8.1.5"
        status:
          type: string
          enum: [ active, disconnected, removing ]
          description: Current peer status
          example: "active"
        created_at:
          type: string
          format: date-time
          description: Peer creation timestamp
          example: "2023-01-01T00:00:00Z"
        last_handshake_at:
          type: string
          format: date-time
          description: Last WireGuard handshake timestamp
          example: "2023-01-01T12:00:00Z"

    PeersListResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          type: object
          required:
            - peers
            - total_count
            - offset
            - limit
          properties:
            peers:
              type: array
              items:
                $ref: "#/components/schemas/PeerInfo"
              description: List of peers
            total_count:
              type: integer
              description: Total number of peers matching filters
              example: 1
            offset:
              type: integer
              description: Number of results skipped
              example: 0
            limit:
              type: integer
              description: Maximum number of results returned
              example: 50

    PeerResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [ true ]
          example: true
        data:
          $ref: "#/components/schemas/PeerInfo"